/*
LESS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: @icon-home-width;
}

The large array-like variables contain all information about a single icon
@icon-home: x y offset_x offset_y width height total_width total_height image_path name;

At the bottom of this section, we provide information about the spritesheet itself
@spritesheet: width height image @spritesheet-sprites;
*/
@line-name: 'line';
@line-x: 36px;
@line-y: 114px;
@line-offset-x: -36px;
@line-offset-y: -114px;
@line-width: 100px;
@line-height: 12px;
@line-total-width: 234px;
@line-total-height: 183px;
@line-image: '../img/sprite.png';
@line: 36px 114px -36px -114px 100px 12px 234px 183px '../img/sprite.png' 'line';
@logo-name: 'logo';
@logo-x: 0px;
@logo-y: 0px;
@logo-offset-x: 0px;
@logo-offset-y: 0px;
@logo-width: 234px;
@logo-height: 114px;
@logo-total-width: 234px;
@logo-total-height: 183px;
@logo-image: '../img/sprite.png';
@logo: 0px 0px 0px 0px 234px 114px 234px 183px '../img/sprite.png' 'logo';
@phone-name: 'phone';
@phone-x: 0px;
@phone-y: 150px;
@phone-offset-x: 0px;
@phone-offset-y: -150px;
@phone-width: 30px;
@phone-height: 33px;
@phone-total-width: 234px;
@phone-total-height: 183px;
@phone-image: '../img/sprite.png';
@phone: 0px 150px 0px -150px 30px 33px 234px 183px '../img/sprite.png' 'phone';
@search-name: 'search';
@search-x: 0px;
@search-y: 114px;
@search-offset-x: 0px;
@search-offset-y: -114px;
@search-width: 36px;
@search-height: 36px;
@search-total-width: 234px;
@search-total-height: 183px;
@search-image: '../img/sprite.png';
@search: 0px 114px 0px -114px 36px 36px 234px 183px '../img/sprite.png' 'search';
@sm-name: 'sm';
@sm-x: 36px;
@sm-y: 126px;
@sm-offset-x: -36px;
@sm-offset-y: -126px;
@sm-width: 16px;
@sm-height: 16px;
@sm-total-width: 234px;
@sm-total-height: 183px;
@sm-image: '../img/sprite.png';
@sm: 36px 126px -36px -126px 16px 16px 234px 183px '../img/sprite.png' 'sm';
@spritesheet-width: 234px;
@spritesheet-height: 183px;
@spritesheet-image: '../img/sprite.png';
@spritesheet-sprites: @line @logo @phone @search @sm;
@spritesheet: 234px 183px '../img/sprite.png' @spritesheet-sprites;

/*
The provided classes are intended to be used with the array-like variables

.icon-home {
  .sprite-width(@icon-home);
}
.icon-email {
  .sprite(@icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
.sprite-width(@sprite) {
  width: extract(@sprite, 5);
}

.sprite-height(@sprite) {
  height: extract(@sprite, 6);
}

.sprite-position(@sprite) {
  @sprite-offset-x: extract(@sprite, 3);
  @sprite-offset-y: extract(@sprite, 4);
  background-position: @sprite-offset-x @sprite-offset-y;
}

.sprite-image(@sprite) {
  @sprite-image: extract(@sprite, 9);
  @sprite-image-bare: ~`"@{sprite-image}".slice(1, -1)`;
  background-image: url(@sprite-image-bare);
}

.sprite(@sprite) {
  .sprite-image(@sprite);
  .sprite-position(@sprite);
  .sprite-width(@sprite);
  .sprite-height(@sprite);
}

/*
The `.sprites` mixin generates identical output to the CSS template
  but can be overridden inside of LESS

This must be run when you have at least 2 sprites.
  If run with a single sprite, then there will be reference errors.

.sprites(@spritesheet-sprites);
*/
.sprites(@sprites, @i: 1) when (@i <= length(@sprites)) {
  @sprite: extract(@sprites, @i);
  @sprite-name: e(extract(@sprite, 10));
  .@{sprite-name} {
    .sprite(@sprite);
  }
  .sprites(@sprites, @i + 1);
}
